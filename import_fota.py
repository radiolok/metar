import configparser
import os
import shutil
import glob
import time


Import("env")

def get_library_path(lib_name):
    global_lib_path = os.path.join(env["PROJECT_DIR"], ".pio", "libdeps", env["PIOENV"], lib_name)
    if os.path.exists(global_lib_path):
        print(f"‚úÖ Found global library: {global_lib_path}")
        return global_lib_path

def merge_filesystems():
    print("\nüîß Merging filesystems...")
    # –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
    project_data = env.subst("$PROJECT_DATA_DIR")
    lib_data = os.path.join(get_library_path("avr-fota"), "data")
    temp_data = os.path.join(env["PROJECT_DIR"], "merged_data")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if os.path.exists(temp_data):
        shutil.rmtree(temp_data)
    os.makedirs(temp_data)

    print(f"üìÇ Project data: {project_data}")
    print(f"üìÇ Library data: {lib_data}")
    print(f"üìÇ Temporary FS: {temp_data}")

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(project_data):
        print("\nüì• Copying project data:")
        for item in os.listdir(project_data):
            src = os.path.join(project_data, item)
            dst = os.path.join(temp_data, item)
            if os.path.isfile(src):
                shutil.copy2(src, dst)
                print(f"  ‚Üí {item}")
            elif os.path.isdir(src):
                shutil.copytree(src, dst)
                print(f"  ‚Üí {item}/")

    # –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    if os.path.exists(lib_data):
        print("\nüì• Copying library data:")
        # –ú–∞—Å–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        patterns = [
            "config.json",
            "*.js",
            "*.html",
            "*.gif"
        ]

        for pattern in patterns:
            for src in glob.glob(os.path.join(lib_data, pattern), recursive=True):
                rel_path = os.path.relpath(src, lib_data)
                dst = os.path.join(temp_data, rel_path)

                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                os.makedirs(os.path.dirname(dst), exist_ok=True)

                shutil.copy2(src, dst)
                print(f"  ‚Üí {rel_path}")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
    env["PROJECT_DATA_DIR"] = temp_data
    print(f"\n‚úÖ Merged {len(os.listdir(temp_data))} items into temporary FS")

def apply_submodule_config(submodule_config, env_name):
    config = configparser.ConfigParser()
    config.read(submodule_config)

    if env_name in config:
        for key, value in config.items(env_name):
            if key not in ["platform", "framework", "extra_scripts", "lib_deps"]:
                print(key, value)
                if value.isdigit():
                    value = int(value)
                env.Replace(**{key.upper(): value})
                print(f"Applied: {key.upper()} = {value}")
# –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
    env.Append(CUSTOM_SUBMODULE_LOADED="1")


apply_submodule_config("avr-fota/platformio.ini", "env:esp32cam")
merge_filesystems()